<HxListLayout Title="Title" TFilterModel="FilterModelDto" FilterModel="filterModel" FilterModelChanged="HandleFilterModelChanged">
    <NamedViewsTemplate>
        <HxNamedViewList TFilterModel="FilterModelDto" FilterModel="filterModel" FilterModelChanged="HandleFilterModelChanged" NamedViews="namedViews" OnNamedViewSelected="NamedViewSelected" />
    </NamedViewsTemplate>
    <SearchTemplate>
        
    </SearchTemplate>
    <FilterTemplate Context="filterContext">
        <HxInputNumber Label="MinimumItemId" @bind-Value="filterContext.MinimumLCID" />
    </FilterTemplate>
    <CommandsTemplate>
        <HxButton Text="New item" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="NewItemClicked" />
    </CommandsTemplate>
    <DataTemplate>
        <HxGrid @ref="gridComponent" ContentNavigationMode="GridContentNavigationMode.Pagination" Responsive="true" TItem="EditableCultureInfo" PageSize="10" DataProvider="LoadDataItems" SelectedDataItem="currentItem" SelectedDataItemChanged="HandleSelectedDataItemChanged">
            <Columns>
                <HxGridColumn HeaderText="LCID" ItemTextSelector="@(item => item.LCID.ToString())" SortKeySelector="@(item => item.LCID)" IsDefaultSortColumn="true" />
		        <HxGridColumn HeaderText="DisplayName" ItemTextSelector="@(item => item.DisplayName)" SortKeySelector="@(item => item.DisplayName)" />
		        <HxGridColumn HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortKeySelector="@(item => item.Name)"  />
		        <HxGridColumn HeaderText="EnglishName" ItemTextSelector="@(item => item.EnglishName)" SortKeySelector="@(item => item.EnglishName)"  />	
				<HxContextMenuGridColumn Context="item">
					<HxContextMenu>
						<HxContextMenuItem Text="Delete" OnClick="async () => await DeleteItemClicked(item)" ConfirmationQuestion="@($"Are you sure you want to delete {item.Name}?")" />
					</HxContextMenu>
				</HxContextMenuGridColumn>
            </Columns>
        </HxGrid>
    </DataTemplate>
    <DetailTemplate>
        Edit: @currentItem?.LCID
    </DetailTemplate>
</HxListLayout>

@code {
    [Inject] protected NavigationManager NavigationManager { get; set; }

    private EditableCultureInfo currentItem;
    private FilterModelDto filterModel = new FilterModelDto();
    private HxGrid<EditableCultureInfo> gridComponent;

    private readonly IEnumerable<NamedView<FilterModelDto>> namedViews = new List<NamedView<FilterModelDto>>()
        {
            new NamedView<FilterModelDto>("Minimum = 1", () => new FilterModelDto { MinimumLCID = 1 } ),
            new NamedView<FilterModelDto>("Minimum = 50", () => new FilterModelDto { MinimumLCID = 50 }),
            new NamedView<FilterModelDto>("Minimum = 100", () => new FilterModelDto { MinimumLCID = 100 })
        };

    private List<EditableCultureInfo> localEditableCultureInfos = CultureInfo.GetCultures(CultureTypes.AllCultures).Select(c => new EditableCultureInfo()
        {
            LCID = c.LCID,
            DisplayName = c.DisplayName,
            Name = c.Name,
            EnglishName = c.EnglishName
        }).ToList();

    private Task<GridDataProviderResult<EditableCultureInfo>> LoadDataItems(GridDataProviderRequest<EditableCultureInfo> request)
    {
        IEnumerable<EditableCultureInfo> result = localEditableCultureInfos.Where(i => i.LCID >= filterModel.MinimumLCID).ToList();

        return Task.FromResult(request.ApplyTo(result));
    }

    private async Task HandleFilterModelChanged(FilterModelDto newFilterModel)
    {
        filterModel = newFilterModel;
        await gridComponent.RefreshDataAsync();
    }

    protected async Task NamedViewSelected(NamedView<FilterModelDto> namedView)
    {
        filterModel = namedView.Filter();
        await gridComponent.RefreshDataAsync();
    }

    private async Task DeleteItemClicked(EditableCultureInfo editableCultureInfo)
    {
        localEditableCultureInfos.Remove(editableCultureInfo);
        await gridComponent.RefreshDataAsync();
    }

    private Task HandleSelectedDataItemChanged(EditableCultureInfo selection)
    {
        currentItem = selection;
        // await dataItemEditComponent.ShowAsync();
        return Task.CompletedTask;
    }

    private Task NewItemClicked()
    {
        currentItem = new();
        // await dataItemEditComponent.ShowAsync();
    return Task.CompletedTask;
    }

    public record FilterModelDto
    {
        public int MinimumLCID { get; set; }
    }

    private record EditableCultureInfo
    {
        public int LCID { get; set; }
        public string DisplayName { get; set; }
        public string Name { get; set; }
        public string EnglishName { get; set; }
    }
}