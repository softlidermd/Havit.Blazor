@namespace Havit.Blazor.Components.Web.Bootstrap
@using Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TItem

<div id="@dropdownId" class="@CssClassHelper.Combine("hx-search-box", CssClassEffective)">
    <HxDropdown AutoClose="DropdownAutoClose.Outside">
        <HxDropdownToggleElement @ref="dropdownToggle"
                                 ElementName="div"
                                 CssClass="@(initialized || DefaultContentTemplate is not null ? null : "disabled")"
                                 DropdownReference="@("#" + dropdownId)"
                                 DropdownOffset="@DropdownOffset"
                                 OnShown="HandleDropdownMenuShown"
                                 OnHidden="HandleDropdownMenuHidden"
                                 id="@dropdownToggleElementId">

            <div class="position-relative">
                @if (!string.IsNullOrEmpty(Label))
                {
                    <label class="form-label">@Label</label>
                }
                <span class="@CssClassHelper.Combine(
                                (HasInputGroupsEffective ? "input-group" : null),
                                (LabelType == Havit.Blazor.Components.Web.Bootstrap.LabelType.Floating) ? "form-floating" : null,
                                InputSizeEffective.AsInputGroupCssClass(),
                                InputGroupCssClass)">
                    
                    @if (InputGroupStartText is not null)
                    {
                        <span class="input-group-text">@InputGroupStartText</span>
                    }

                    @InputGroupStartTemplate

                    <input @ref="InputElement"
                        id="@inputId"
                        value="@TextQuery"
                        @oninput="(eventArgs) => HandleTextQueryValueChanged(eventArgs.Value.ToString())"
                        @onfocus="HandleInputFocus"
                        @onblur="HandleInputBlur"
                        inputmode="search"
                        enabled="@Enabled"
                        placeholder="@Placeholder"
                        class="@CssClassHelper.Combine("form-control", InputCssClassEffective)" />
                            
                    @InputGroupEndTemplate

                    @if (InputGroupEndText is not null)
                    {
                        <span class="input-group-text">@InputGroupEndText</span>
                    }
                </span>

                @if (InputGroupEndText is null && InputGroupEndTemplate is null)
                {
                    if (dataProviderInProgress)
                    {
                        <div class="hx-search-box-input-icon hx-search-box-input-icon-end">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(TextQuery) && (ClearIconEffective is not null))
                    {
                        <div role="button" class="hx-search-box-input-icon hx-search-box-input-icon-end" @onclick="ClearInputAsync">
                            <HxIcon Icon="ClearIconEffective" />
                        </div>
                    }
                    else if (SearchIconEffective is not null)
                    {
                        <div class="hx-search-box-input-icon hx-search-box-input-icon-end">
                            <HxIcon Icon="SearchIconEffective" />
                        </div>
                    }
                }
            </div>
        </HxDropdownToggleElement>

        <HxDropdownMenu>
            @if ((searchResults.Count > 0) && (TextQuery.Length >= MinimumLengthEffective))
            {
                @for (int i = 0; i < searchResults.Count; i++)
                {
                    var item = searchResults[i];

                    string title = ItemTitleSelector?.Invoke(item) ?? null;
                    string subtitle = ItemSubtitleSelector?.Invoke(item) ?? null;
                    IconBase icon = ItemIconSelector?.Invoke(item) ?? null;

                    <li class="overflow-hidden">
                        <button
                            type="button"
                            tabindex="-1"
                            class="@CssClassHelper.Combine("dropdown-item", focusedItemIndex == i ? "hx-dropdown-item-focused" : null, ItemCssClassEffective)"
                            @onclick="() => HandleItemSelected(item)">
                            
                            @if (ItemTemplate is null)
                            {
                                <HxSearchBoxItemInternal Title="@title" Subtitle="@subtitle" Icon="@icon" />
                            }
                            else
                            {
                                @ItemTemplate(item)
                            }
                        </button>
                    </li>
                }
            }
            else if ((TextQuery is not null) && (TextQuery.Length >= MinimumLengthEffective))
            {
                @NotFoundTemplate
            }
            else
            {
                @DefaultContentTemplate
            }

            @if (AllowTextQuery && (TextQuery is not null) && (TextQuery.Length >= MinimumLengthEffective))
            {
                <li class="overflow-hidden">
                    <button
                        type="button"
                        tabindex="-1"
                        class="@CssClassHelper.Combine("dropdown-item", HasFreeTextItemFocus() ? "hx-dropdown-item-focused" : null, ItemCssClassEffective)"
                        @onclick="HandleTextQueryTriggered">

                        @if (TextQueryItemTemplate is null)
                        {
                            <HxSearchBoxItemInternal Title="@TextQuery" Icon="@SearchIconEffective" />
                        }
                        else
                        {
                            @TextQueryItemTemplate(TextQuery)
                        }
                    </button>
                </li>
            }
        </HxDropdownMenu>
    </HxDropdown>
</div>
