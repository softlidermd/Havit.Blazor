@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TValue
@typeparam TItem

@{
    bool enabled = EnabledEffective && (ItemsToRender != null);
}

<div class="hx-multi-select dropdown" role="listbox">
    <div class="@CssClassHelper.Combine((HasInputGroupsEffective ? "input-group" : null), InputGroupCssClass)" data-bs-toggle="@(enabled ? "dropdown" : null)" data-bs-auto-close="outside">
        @if (InputGroupStartText is not null)
        {
            <span class="input-group-text">@InputGroupStartText</span>
        }
    
        @InputGroupStartTemplate
        
        <input
            @ref="inputElement"
            type="text"
            id="@InputId"
            class="@InputCssClass"
            value="@(((ItemsToRender == null) && !String.IsNullOrEmpty(NullDataText)) ? NullDataText : InputText)"
            disabled="@(!enabled)"
            readonly="true"
            @attributes="this.AdditionalAttributes" />

        @InputGroupEndTemplate

        @if (InputGroupEndText is not null)
        {
            <span class="input-group-text">@InputGroupEndText</span>
        }
    </div>

    <ul class="dropdown-menu"> @* Must be always rendered otherwise does not work after disable->enabled scenario *@
        @if (enabled)
        {
            for (int i = 0; i < ItemsToRender.Count; i++)
            {
                string checkboxElementId = InputId + "_" + i.ToString();

                var item = ItemsToRender[i];
                TValue value = SelectorHelpers.GetValue<TItem, TValue>(ValueSelector, item);

                bool itemSelected = Value?.Contains(value) ?? false;

                <li>
                    <button type="button" class="dropdown-item" role="option" @onclick="async () => await HandleItemSelectionChangedAsync(!itemSelected, item)">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="@checkboxElementId" checked="@itemSelected" tabindex="-1" />
                            <label class="form-check-label" for="@checkboxElementId" @onclick:preventDefault >
                                @SelectorHelpers.GetText(TextSelector, item)
                            </label>
                        </div>
                    </button>
                </li>
            }
        }
    </ul>
</div>