@namespace Havit.Blazor.Components.Web.Bootstrap
@using Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TItem

<CascadingValue Value="@columnsListRegistration" Name="@ColumnsRegistrationCascadingValueName" IsFixed="true">
	@* To get the components to the collections, we have to let them render with this component. Still we don't want them to render any output. *@
	@if (MultiSelectionEnabled)
	{
		bool allDataItemsSelected = (paginationDataItemsToRender != null) && (SelectedDataItems != null) && (SelectedDataItems.Count > 0) && (paginationDataItemsToRender.Count == SelectedDataItems.Count);
		<HxMultiSelectGridColumnInternal TItem="TItem"
									 AllDataItemsSelected="@allDataItemsSelected"
									 SelectedDataItems="@SelectedDataItems"
									 OnSelectDataItemClicked="HandleMultiSelectSelectDataItemClicked"
									 OnUnselectDataItemClicked="HandleMultiSelectUnselectDataItemClicked"
									 OnSelectAllClicked="HandleMultiSelectSelectAllClicked"
									 OnSelectNoneClicked="HandleMultiSelectSelectNoneClicked" />
	}
	@Columns
	@if (ContextMenu != null)
	{
		<HxContextMenuGridColumn TItem="TItem" ChildContent="ContextMenu" Order="Int32.MaxValue" />
	}
</CascadingValue>

@{
	List<IHxGridColumn<TItem>> columnsToRender = GetColumnsToRender();
	
	bool shouldRenderLoadingData = RenderLoadingDataEffective && totalCount == null;
	bool shouldRenderLoadingDataWithLoadingTemplate = shouldRenderLoadingData && (LoadingDataTemplate != null);
	bool shouldRenderLoadingDataWithPlaceholders = shouldRenderLoadingData && !shouldRenderLoadingDataWithLoadingTemplate && (PlaceholdersRowCountEffective > 0);

	bool shouldRenderEmptyData = totalCount == 0 && EmptyDataTemplate != null;
	bool shouldRenderData;
	bool shouldRenderFooter = (totalCount > 0) || ((totalCount == 0) && this.ShowFooterWhenEmptyDataEffective);
	var rowHeightValue = ItemRowHeightEffective;
	string rowHeight = rowHeightValue.ToString() + "px";

	switch (ContentNavigationModeEffective)
	{
		case GridContentNavigationMode.Pagination:
		case GridContentNavigationMode.LoadMore:
		case GridContentNavigationMode.PaginationAndLoadMore:
			shouldRenderData = (totalCount > 0);
			break;

		case GridContentNavigationMode.InfiniteScroll:
			shouldRenderData = true; // we cannot remove the Virtualize when there are no data, see #303 (https://github.com/havit/Havit.Blazor/issues/303)
			break;

		default: throw new InvalidOperationException(ContentNavigationModeEffective.ToString());
	}

	if ((paginationDataItemsToRender?.Count == 0) && (CurrentUserState.PageIndex > 0))
	{
		paginationDecreasePageIndexAfterRender = true;
	}
}

@if (columnsToRender.Any() && (shouldRenderLoadingData || shouldRenderEmptyData || shouldRenderData))
{
	<HxProgressIndicator InProgress="@(InProgress ?? (dataProviderInProgress /* indicates data loading */ && !shouldRenderLoadingDataWithPlaceholders /* but not when placeholders are used - in such case we are indicating data loading using the placeholders */))">

		<div class="@CssClassHelper.Combine(ResponsiveEffective ? "table-responsive" : null, TableContainerCssClassEffective)">
			<table class="@GetTableElementCssClass(totalCount > 0)">
				@if (RenderHeaderEffective)
				{
					<thead>
						<tr class="@HeaderRowCssClassEffective">
							@{
								GridHeaderCellContext gridHeaderCellContext = CreateGridHeaderCellContext();
							}

							@foreach (IHxGridColumn<TItem> column in columnsToRender)
							{
								var columnSorting = column.GetSorting();
								bool isCurrentSorting = currentSorting?.FirstOrDefault()?.Column == column;
								var headerCellTemplate = column.GetHeaderCellTemplate(gridHeaderCellContext);
								bool isSortingActive = (totalCount > 0) && columnSorting.Any();

								<th role="@(isSortingActive ? "button" : null)"
									class="@CssClassHelper.Combine(headerCellTemplate.CssClass, isSortingActive ? (isCurrentSorting ? "hx-grid-sorted" : "hx-grid-sortable") : null)"
									@onclick="@(isSortingActive ? async () => await HandleSortingClick(column) : null)"
									@onclick:stopPropagation="isSortingActive">
									<div class="hx-grid-header-cell-container">
										<div class="hx-grid-header-cell-template">@headerCellTemplate.Template</div>
										@if (isSortingActive)
										{
											if (GetSortIconDisplayDirection(isCurrentSorting, currentSorting, columnSorting) == Collections.SortDirection.Ascending)
											{
												<HxIcon CssClass="hx-grid-sort-icon" Icon="@this.SortAscendingIconEffective" />
											}
											else
											{
												<HxIcon CssClass="hx-grid-sort-icon" Icon="@this.SortDescendingIconEffective" />
											}
										}
									</div>
								</th>
							}
						</tr>
				</thead>
				}
				<tbody>
					@if (shouldRenderLoadingData)
					{
						@if (shouldRenderLoadingDataWithPlaceholders)
						{
							int rowsToRender = PlaceholdersRowCountEffective;
							int pageOffset = CurrentUserState.PageIndex * PageSizeEffective;

							for (int i = 0; i < rowsToRender; i++)
							{
								GridPlaceholderCellContext placeholderContext = new GridPlaceholderCellContext { Index = pageOffset + i };
								<tr>
									@foreach (IHxGridColumn<TItem> column in columnsToRender)
									{
										GridCellTemplate placeholderCellTemplate = column.GetItemPlaceholderCellTemplate(placeholderContext);
										<td class="@placeholderCellTemplate.CssClass">
											@placeholderCellTemplate.Template
										</td>
									}
								</tr>
							}
						}
						else
						{
							<tr>
								<td colspan="@columnsToRender.Count">
									@if (shouldRenderLoadingDataWithLoadingTemplate)
									{
										@LoadingDataTemplate
									}
									else
									{
										<div class="text-center text-secondary my-5">
											<div class="fs-3"><HxIcon Icon="@BootstrapIcon.InboxFill" /></div>
											<div>@HxGridLocalizer["LoadingData"]</div>
										</div>
									}
								</td>
							</tr>
						}
					}
					@if (shouldRenderEmptyData)
					{
						<tr>
							<td colspan="@columnsToRender.Count">

								@if (EmptyDataTemplate != null)
								{
									@EmptyDataTemplate
								}
								else
								{
									<HxGridEmptyDataTemplateDefaultContent />
								}

							</td>
						</tr>
					}
					@if (shouldRenderData)
					{

						RenderFragment<TItem> rowTemplate = (TItem item) =>
						@<text>
							@if (SelectionEnabled || MultiSelectionEnabled)
							{
								<tr role="button"
									height="@((this.ContentNavigationModeEffective == GridContentNavigationMode.InfiniteScroll) ? rowHeight : null)"
									class="@CssClassHelper.Combine(
															ItemRowCssClassEffective,
															ItemRowCssClassSelector?.Invoke(item),
															((SelectionEnabled && (item != null) && item.Equals(SelectedDataItem)) ? "table-active" : null))"
									@onclick="async () => await HandleSelectOrMultiSelectDataItemClick(item)"
									@onclick:stopPropagation
									@ondblclick="async () => await InvokeRowDoubleClickedAsync(item)"
									@ondblclick:stopPropagation>

									@foreach (IHxGridColumn<TItem> column in columnsToRender)
									{
										var dataLabel = (column is HxGridColumn<TItem> gridColumn) ? gridColumn.HeaderText : string.Empty;
										// same as below in the else section
										GridCellTemplate cellTemplate = column.GetItemCellTemplate(item);
										<td data-label="@dataLabel" class="@cellTemplate.CssClass">
											@cellTemplate.Template
										</td>
									}
								</tr>
							}
							else
							{
								// !SelectionEnabled && !MultiSelectionEnabled - no table-active, no event handlers
								<tr height="@((this.ContentNavigationModeEffective == GridContentNavigationMode.InfiniteScroll) ? rowHeight : null)"
									class="@CssClassHelper.Combine(ItemRowCssClassEffective, ItemRowCssClassSelector?.Invoke(item))"
									@onclick:stopPropagation>
			
									@foreach (IHxGridColumn<TItem> column in columnsToRender)
									{
										// same as above this else section
										GridCellTemplate cellTemplate = column.GetItemCellTemplate(item);
										<td class="@cellTemplate.CssClass">
											@cellTemplate.Template
										</td>
									}
								</tr>
							}
						</text>;

						@if (ContentNavigationModeEffective == GridContentNavigationMode.InfiniteScroll)
						{
							<Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize TItem="TItem" @ref="infiniteScrollVirtualizeComponent" ItemsProvider="VirtualizeItemsProvider" ItemSize="@ItemRowHeightEffective" OverscanCount="@OverscanCountEffective">
								<ItemContent>
									@rowTemplate(@context)
								</ItemContent>
								<Placeholder Context="placeholderContext">
									<tr height="@rowHeight">
										@foreach (IHxGridColumn<TItem> column in columnsToRender)
										{
											GridCellTemplate placeholderCellTemplate = column.GetItemPlaceholderCellTemplate(new GridPlaceholderCellContext { Index = placeholderContext.Index });
											<td class="@placeholderCellTemplate.CssClass">
												@placeholderCellTemplate.Template
											</td>
										}
									</tr>
								</Placeholder>
							</Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
						}

						@if ((ContentNavigationModeEffective == GridContentNavigationMode.Pagination) || (ContentNavigationModeEffective == GridContentNavigationMode.LoadMore) || (ContentNavigationModeEffective == GridContentNavigationMode.PaginationAndLoadMore))
				        {
					        foreach (TItem item in paginationDataItemsToRender)
					        {
						        @rowTemplate(item)
					        }
				        }
			        }
				</tbody>
				@{
					GridFooterCellContext gridFooterCellContext = CreateGridFooterCellContext();
					GridCellTemplate[] footerTemplates = columnsToRender.Select(column => column.GetFooterCellTemplate(gridFooterCellContext)).ToArray();
					if (footerTemplates.Any(cellTemplate => cellTemplate.Template != null) // there must be a tempate
						&& shouldRenderFooter)
					{
						<tfoot>
							<tr class="@FooterRowCssClassEffective">
								@foreach (GridCellTemplate footerCellTemplate in footerTemplates)
								{
									<td class="@footerCellTemplate.CssClass">@footerCellTemplate.Template</td>
								}
							</tr>
						</tfoot>
					}
				}
			</table>
		</div>

		@if (((ContentNavigationModeEffective == GridContentNavigationMode.Pagination) || (ContentNavigationModeEffective == GridContentNavigationMode.PaginationAndLoadMore)) && (PageSizeEffective > 0) && (totalCount != null))
		{
			int totalPages = (totalCount.Value + PageSizeEffective - 1) / PageSizeEffective;
			if (totalPages > 1)
			{
				int currentPageIndex = CurrentUserState.PageIndex + ((CurrentUserState.LoadMoreAdditionalItemsCount + PageSizeEffective - 1) / PageSizeEffective);
				<HxPager TotalPages="@totalPages"
						 CurrentPageIndex="@currentPageIndex"
						 CurrentPageIndexChanged="@HandlePagerCurrentPageIndexChanged"
						 Settings="@PagerSettingsEffective" />
			}
		}

		@if (((ContentNavigationModeEffective == GridContentNavigationMode.LoadMore) || (ContentNavigationModeEffective == GridContentNavigationMode.PaginationAndLoadMore)) && (PageSizeEffective > 0) && (totalCount != null))
		{
			if ((((CurrentUserState.PageIndex + 1) * PageSizeEffective) + CurrentUserState.LoadMoreAdditionalItemsCount) < totalCount.Value)
			{
				<div class="hx-grid-load-more-container">
					@if (LoadMoreTemplate != null)
					{
						var loadMoreContext = GridLoadMoreTemplateContext.CreateFor(this);
						<text>
							@LoadMoreTemplate(loadMoreContext)
						</text> 
					}
					else
					{
						string buttonText = this.LoadMoreButtonText ?? HxGridLocalizer["LoadMoreData"];
						<HxButton Text="@buttonText" Settings="this.LoadMoreButtonSettingsEffective" OnClick="HandleLoadMoreClick" />
					}
				</div>
			}
		}

	</HxProgressIndicator>
}