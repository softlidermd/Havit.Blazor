@attribute [Route("/components/" + nameof(HxGrid))]
@attribute [Route("/components/" + nameof(HxGridColumn<object>))]

<ComponentApiDoc Type="typeof(HxGrid<TItem>)">
	<MainContent>

		<DocHeading Title="Data binding" />
		<p>
			Implement the <code>@nameof(HxGrid<object>.DataProvider)</code> method which is provided with a "request"
			(requested sorting and paging) and returns a "result" (items to display and total count of items).
		</p>
		<Demo Type="typeof(HxGrid_Demo_DataProvider)" />

		<DocHeading Title="Automatic sorting and paging" Id="ApplyTo" />
		<p>
			If you have your <code>IEnumerable</code> data-source ready (all items), you can use the <code>request.ApplyTo(data)</code>
			extension method to apply sorting and paging automatically.
		</p>
		<Demo Type="typeof(HxGrid_Demo_ApplyTo)" />

		<DocHeading Title="IQueryable usage" Id="Queryable" Level="3" />
		<p>
			If you have <code>IQueryable</code> as a data-source provider, you can use the <code>data.ApplyGridDataProviderRequest(request)</code>
            method to apply sorting and paging to your data source. Then you must query data on your own, because we do not have access to cancellable async methods
            in the components (CountAsync, ToListAsync) and it is quite crutial to use cancellable methods, mainly for infinite scroll. 
        </p>
        <Demo Type="typeof(HxGrid_Demo_Queryable)" />


        <DocAlert Type="DocAlertType.Warning">
            The <code>@nameof(HxGrid).@nameof(HxGrid<object>.DataProvider)</code> should always return an instance of <code>@nameof(GridDataProviderResult<object>)</code>, <code>null</code> is not allowed.
            The method you provide is <code>async</code> and should <code>await</code> the data if needed (loading progress is indicated in meantime).
        </DocAlert>

		<DocHeading Title="Refreshing data" Id="RefreshData" />
		<p>
			Whenever you need to refresh data in the grid (e.g. when the filter to be applied changes),
			call the <code>gridComponent.RefreshDataAsync()</code> method to let the grid know
			it should ask the <code>DataProvider</code> for fresh data.
		</p>
		<Demo Type="typeof(HxGrid_Demo_RefreshData)" />

		<DocHeading Title="Empty data" />
		<p>When the <code>DataProvider</code> returns no data, the <code>EmptyDataTemplate</code> is rendered (when not set, the <code>&lt;HxGridDefaultEmptyDataTemplateContent /&gt;</code> is used).</p>
		<Demo Type="typeof(HxGrid_EmptyDataDemo)" />

		<DocHeading Title="Content navigation modes" />
		<p>
			<code>HxGrid</code> has several navigation modes, which can be set using the <code>ContentNavigationMode</code> parameter.
			The default navigation mode is <code>Pagination</code>.
		</p>

		<DocHeading Title="Infinite scroll (Virtualized)" Id="InfiniteScroll" Level="3" />
		<p>
			You can switch from paging to infinite-scroll by setting <code>ContentNavigationMode="GridContentNavigationMode.InfiniteScroll"</code>.
			Use a Placeholder (<code>&lt;Placeholder&gt;...&lt;/Placeholder&gt;</code>) to display content until the item data is available.
		</p>
		<DocAlert Type="DocAlertType.Warning">
			The <code>ItemRowHeight</code> parameter should be set for the virtualization to work properly. The default value is 41 pixels (default table row height in Bootstrap).
		</DocAlert>
		<Demo Type="typeof(HxGrid_VirtualizedDemo)" />

		<DocHeading Title="Load more button" Id="LoadMore" Level="3" />
		<p>With <code>ContentNavigationMode.LoadMore</code> you can allow loading additional items with a <i>Load more</i> button.</p>
		<Demo Type="typeof(HxGrid_Demo_LoadMore)" />
		<p>
			Button text can be customized with <code>LoadMoreButtonText</code> or you can create your own navigation with
			<code>LoadMoreTemplate</code> (with help of the <code>context.LoadMoreAsync()</code> method).<br />
		</p>
		<p>
			You can combine <i>Load more</i> button with pagination by using <code>GridContentNavigationMode.PaginationAndLoadMore</code>.
		</p>

		<DocHeading Title="Context menu" Id="context-menu" />
		<p>Use <code>HxContextMenuGridColumn</code> to add context-menu to the grid.</p>
		<Demo Type="typeof(HxGrid_Demo_ContextMenu)" />

		<DocHeading Title="Multiselect with checkboxes" Id="multiselect" />
		<p>You can let the user select multiple rows with <code>@nameof(HxGrid<object>.MultiSelectionEnabled)="true"</code>, selected items are represented by <code>@nameof(HxGrid<object>.SelectedDataItems)</code> parameter (bindable).</p>
		<DocAlert>
			<code>@nameof(HxGrid<object>.SelectedDataItems)</code> contains only visible items. Items are removed from the selection if they are not rendered (e.g. after paging, sorting, ...).
			<code>@nameof(HxGrid<object>.MultiSelectionEnabled)</code> cannot be combined with <code>@nameof(GridContentNavigationMode.InfiniteScroll)</code>.
		</DocAlert>
		<Demo Type="typeof(HxGrid_Demo_Multiselect)" />

		<DocHeading Title="Inline-editing" />
		<p>To achieve an inline-editing experience, you can use the <code>SelectedDataItem</code> and render editing UI for such items. Simply specify the content of the <code>ItemTemplate</code> in <code>HxGridColumn</code> and use the <code>SelectedDataItemChanged</code> event to save changes (or you can add a column with command buttons).</p>
		<Demo Type="typeof(HxGrid_Demo_InlineEditing)" />

		<DocHeading Title="Filtering from headers" Id="header-filtering" />
		<p>Individual column filtering can be set up by adding your filtering UI to the columns' <code>HeaderTemplate</code>s and filtering the data in the <code>DataProvider</code> based on the values provided.</p>
		<Demo Type="typeof(HxGrid_Demo_HeaderFiltering)" />

		<DocHeading Title="Hoverable rows" Id="hover" />
		<p>You can set <code>@nameof(HxGrid<TItem>.Hover)</code> parameter to enable/disable hover state on rows. If not set, hover state is enabled if the grid has selection enabled.</p>
		<Demo Type="typeof(HxGrid_Demo_Hover)" />

		<DocHeading Title="Striped rows" Id="striped" />
		<p>You can set <code>@nameof(HxGrid<TItem>.Striped)</code> parameter to adds zebra-striping (alternating rows).</p>
		<Demo Type="typeof(HxGrid_Demo_Striped)" />

		<DocHeading Title="Persisting the state" Id="persisting-state" />
		<p>You can load/save <code>@nameof(HxGrid<TItem>.CurrentUserState)</code> parameter to persist the grid state.</p>
		<DocAlert Type="DocAlertType.Info">
			To persist sorting, you must set the <code>@nameof(HxGridColumn<TItem>)&lt;TItem&gt;.@nameof(HxGridColumn<TItem>.Id)</code> properties.
		</DocAlert>

		<Demo Type="typeof(HxGrid_Demo_StatePersisting)" />
	</MainContent>

    <CssVariables>
        <ComponentApiDocCssVariable Name="--hx-grid-button-hover-background" Default="rgba(var(--bs-black-rgb), .1)">
            Grid button background color on hover.
        </ComponentApiDocCssVariable>
        <ComponentApiDocCssVariable Name="--hx-grid-button-border-radius" Default=".25rem">
            Grid button border radius.
        </ComponentApiDocCssVariable>
        <ComponentApiDocCssVariable Name="--hx-grid-sorted-icon-color" Default="var(--bs-primary)">
            Color of the sorted icon.
        </ComponentApiDocCssVariable>
    </CssVariables>
</ComponentApiDoc>

<ComponentApiDoc Type="typeof(HxGridColumn<TItem>)" />
<ComponentApiDoc Type="typeof(HxContextMenuGridColumn<TItem>)" />
<ComponentApiDoc Type="typeof(HxGridEmptyDataTemplateDefaultContent)" />
