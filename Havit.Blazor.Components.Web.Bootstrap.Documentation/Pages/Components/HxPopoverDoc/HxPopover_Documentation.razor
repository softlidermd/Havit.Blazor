@attribute [Route("/components/" + nameof(HxPopover))]

<ComponentApiDoc Type="typeof(HxPopover)">

	<DocAlert Type="DocAlertType.Warning">
		The popover wrapper gets rendered only if <code>Title</code>, <code>Content</code> or <code>WrapperCssClass</code> parameters is set.
		If all are <code>null</code> or empty, only the <code>ChildContent</code> is rendered.
	</DocAlert>

    <DocHeading Title="Basic usage" />
	<Demo Type="typeof(HxPopover_Demo_BasicUsage)" Tabs="false" />

    <DocHeading Title="Placement" />
	<p>You can change the placement of the popover with <code>@nameof(HxPopover.Placement)</code> parameter:</p>
	<Demo Type="typeof(HxPopover_Demo_Placement)" />

    <DocHeading Title="HTML content" />
	<p>Use <code>Html="true"</code> to enable HTML in your content.</p>
	<Demo Type="typeof(HxPopover_Demo_HtmlContent)" />

    <DocHeading Title="HTML sanitization" Level="3" />
	<p>By default, the HTML content gets <a href="https://getbootstrap.com/docs/5.2/getting-started/javascript/#sanitizer">sanitized</a>. To disable sanitization set <code>Sanitize="false"</code>.</p>
	<Demo Type="typeof(HxPopover_Demo_HtmlContent_Sanitize)" />

    <DocHeading Title="Dismiss on next click" />
	<p>Use the <code>Trigger="PopoverTrigger.Focus"</code> to dismiss popovers on the user’s next click of a different element than the toggle element.</p>
	<Demo Type="typeof(HxPopover_Demo_Dismissible)" />

    <DocHeading Title="Programmability" />
	<p>
		You can use <code>ShowAsync()</code> and <code>HideAsync()</code> methods + <code>OnShown</code> and <code>OnHidden</code> events
		to program your own interaction.
	</p>
	<Demo Type="typeof(HxPopover_Demo_MethodsEvents)" />
	<p>You can also use the <code>DisableAsync()</code> and <code>EnableAsync()</code> to control the popover behavior.</p>
	<Demo Type="typeof(HxPopover_Demo_EnableDisable)" />

</ComponentApiDoc>
